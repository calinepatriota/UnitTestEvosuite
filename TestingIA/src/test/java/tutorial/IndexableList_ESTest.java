/*
 * This file was automatically generated by EvoSuite
 * Sat Nov 06 23:40:56 GMT 2021
 */

package tutorial;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.ArrayList;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import tutorial.IndexableList_ESTest_scaffolding;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class IndexableList_ESTest extends IndexableList_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Integer[] integerArray0 = new Integer[1];
      IndexableList<Integer> indexableList0 = new IndexableList<Integer>(integerArray0, integerArray0);
      indexableList0.acrescentar((Integer) indexableList0.MAX_VALOR);
      assertEquals(4, indexableList0.size());
      
      indexableList0.remover(1000);
      assertEquals(3, indexableList0.size());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Object[] objectArray0 = new Object[7];
      Object[] objectArray1 = new Object[6];
      IndexableList<Object> indexableList0 = new IndexableList<Object>(objectArray0, objectArray1);
      // Undeclared exception!
      try { 
        indexableList0.remover(7);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      IndexableList<String> indexableList0 = new IndexableList<String>();
      indexableList0.numElemDireita = (-532);
      boolean boolean0 = indexableList0.isEmpty();
      assertEquals((-531), indexableList0.size());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      String[] stringArray0 = new String[6];
      stringArray0[0] = "T_SE;gE\"%R$-";
      stringArray0[1] = "";
      IndexableList<String> indexableList0 = new IndexableList<String>(stringArray0, stringArray0);
      indexableList0.numElemEsquerda = 0;
      int int0 = indexableList0.indexOf("");
      assertEquals(7, indexableList0.size());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ArrayList<String> arrayList0 = new ArrayList<String>();
      IndexableList<String> indexableList0 = new IndexableList<String>(arrayList0, arrayList0);
      indexableList0.numElemDireita = (-6);
      Object object0 = new Object();
      int int0 = indexableList0.indexOf(object0);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Integer[] integerArray0 = new Integer[8];
      Integer integer0 = new Integer((-637));
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(0);
      integerArray0[1] = integer1;
      IndexableList<Integer> indexableList0 = new IndexableList<Integer>(integerArray0, integerArray0);
      int int0 = indexableList0.indexOf(integerArray0[1]);
      assertEquals(17, indexableList0.size());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      ArrayList<Object> arrayList1 = new ArrayList<Object>();
      arrayList0.add((Object) arrayList1);
      IndexableList<Object> indexableList0 = new IndexableList<Object>(arrayList0, arrayList1);
      int int0 = indexableList0.indexOf(arrayList1);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      IndexableList<Integer> indexableList0 = new IndexableList<Integer>();
      indexableList0.numElemDireita = (-2);
      boolean boolean0 = indexableList0.contem(indexableList0.MAX_VALOR);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      String[] stringArray0 = new String[3];
      IndexableList<String> indexableList0 = new IndexableList<String>(stringArray0, stringArray0);
      indexableList0.numElemEsquerda = (-1);
      // Undeclared exception!
      try { 
        indexableList0.contem("t:mv=:692$bFoj:FZ/_");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("tutorial.IndexableList", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      String[] stringArray0 = new String[3];
      IndexableList<String> indexableList0 = new IndexableList<String>(stringArray0, stringArray0);
      indexableList0.numElemDireita = (-1858);
      indexableList0.aumentarDireitaArray(1000);
      assertFalse(indexableList0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      IndexableList<Object> indexableList0 = new IndexableList<Object>();
      indexableList0.numElemEsquerda = (-1);
      indexableList0.aumentarDireitaArray(0);
      assertEquals(0, indexableList0.size());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      IndexableList<Object> indexableList0 = new IndexableList<Object>();
      Object[] objectArray0 = new Object[1];
      indexableList0.arrayEsquerda = objectArray0;
      // Undeclared exception!
      try { 
        indexableList0.add((-1534), "s7D~");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ArrayList<String> arrayList0 = new ArrayList<String>();
      IndexableList<String> indexableList0 = new IndexableList<String>(arrayList0, arrayList0);
      indexableList0.numElemEsquerda = 2;
      // Undeclared exception!
      try { 
        indexableList0.add(0, (String) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      IndexableList<Integer> indexableList0 = new IndexableList<Integer>(arrayList0, arrayList0);
      indexableList0.numElemEsquerda = (-163);
      int int0 = indexableList0.size();
      assertEquals((-162), int0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      Integer integer0 = new Integer(0);
      arrayList0.add(integer0);
      IndexableList<Integer> indexableList0 = new IndexableList<Integer>(arrayList0, arrayList0);
      indexableList0.remover(0);
      assertEquals(2, indexableList0.size());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Integer[] integerArray0 = new Integer[3];
      Integer integer0 = new Integer(0);
      integerArray0[2] = integer0;
      IndexableList<Integer> indexableList0 = new IndexableList<Integer>(integerArray0, integerArray0);
      Object object0 = indexableList0.get((int) integerArray0[2]);
      assertEquals(7, indexableList0.size());
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Integer[] integerArray0 = new Integer[4];
      integerArray0[0] = (Integer) 1000;
      IndexableList<Integer> indexableList0 = new IndexableList<Integer>(integerArray0, integerArray0);
      Object object0 = indexableList0.get(0);
      assertEquals(1000, object0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      IndexableList<Object> indexableList0 = new IndexableList<Object>();
      // Undeclared exception!
      try { 
        indexableList0.set(1144, (Object) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      ArrayList<String> arrayList0 = new ArrayList<String>();
      IndexableList<String> indexableList0 = new IndexableList<String>(arrayList0, arrayList0);
      indexableList0.arrayDireita = null;
      // Undeclared exception!
      try { 
        indexableList0.remover(0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      IndexableList<String> indexableList0 = new IndexableList<String>();
      indexableList0.arrayEsquerda = null;
      // Undeclared exception!
      try { 
        indexableList0.prefixar("");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("tutorial.IndexableList", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      String[] stringArray0 = new String[6];
      IndexableList<Object> indexableList0 = new IndexableList<Object>(stringArray0, stringArray0);
      // Undeclared exception!
      try { 
        indexableList0.indexOf((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("tutorial.IndexableList", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      IndexableList<Object> indexableList0 = new IndexableList<Object>(arrayList0, arrayList0);
      indexableList0.numElemDireita = 1000;
      // Undeclared exception!
      try { 
        indexableList0.indexOf(arrayList0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("tutorial.IndexableList", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      String[] stringArray0 = new String[0];
      IndexableList<String> indexableList0 = new IndexableList<String>(stringArray0, stringArray0);
      indexableList0.acrescentar("");
      indexableList0.arrayDireita = (Object[]) stringArray0;
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        indexableList0.contem(object0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("tutorial.IndexableList", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      IndexableList<Object> indexableList0 = new IndexableList<Object>(arrayList0, arrayList0);
      // Undeclared exception!
      try { 
        indexableList0.aumentarEsquerdaArray((-1319));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("tutorial.IndexableList", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      IndexableList<Object> indexableList0 = new IndexableList<Object>(objectArray0, objectArray0);
      indexableList0.arrayDireita = null;
      // Undeclared exception!
      try { 
        indexableList0.aumentarDireitaArray((-1560));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("tutorial.IndexableList", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Object[] objectArray0 = new Object[8];
      IndexableList<Object> indexableList0 = new IndexableList<Object>(objectArray0, objectArray0);
      // Undeclared exception!
      try { 
        indexableList0.aumentarDireitaArray((-1002));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("tutorial.IndexableList", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      IndexableList<String> indexableList0 = new IndexableList<String>();
      indexableList0.arrayEsquerda = null;
      // Undeclared exception!
      try { 
        indexableList0.add(0, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("tutorial.IndexableList", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      IndexableList<String> indexableList0 = new IndexableList<String>();
      indexableList0.arrayDireita = null;
      // Undeclared exception!
      try { 
        indexableList0.acrescentar("[$shl[0yi cy");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("tutorial.IndexableList", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      IndexableList<Object> indexableList0 = new IndexableList<Object>();
      indexableList0.numElemDireita = 1966;
      // Undeclared exception!
      try { 
        indexableList0.acrescentar(indexableList0.MAX_VALOR);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      IndexableList<String> indexableList0 = null;
      try {
        indexableList0 = new IndexableList<String>((String[]) null, (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("tutorial.IndexableList", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      IndexableList<Integer> indexableList0 = null;
      try {
        indexableList0 = new IndexableList<Integer>(arrayList0, (ArrayList<Integer>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("tutorial.IndexableList", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      ArrayList<Integer> arrayList1 = new ArrayList<Integer>(arrayList0);
      Integer integer0 = new Integer(3220);
      arrayList0.add(integer0);
      IndexableList<Integer> indexableList0 = new IndexableList<Integer>(arrayList1, arrayList0);
      assertEquals(2, indexableList0.size());
      
      Integer integer1 = indexableList0.set(0, (Integer) indexableList0.MAX_VALOR);
      assertNotNull(integer1);
      assertEquals(3220, (int)integer1);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Integer[] integerArray0 = new Integer[1];
      int int0 = 0;
      Integer integer0 = new Integer(0);
      IndexableList<Integer> indexableList0 = new IndexableList<Integer>(integerArray0, integerArray0);
      Integer integer1 = indexableList0.set(int0, integer0);
      assertNull(integer1);
      assertEquals(3, indexableList0.size());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      IndexableList<Integer> indexableList0 = new IndexableList<Integer>(arrayList0, arrayList0);
      // Undeclared exception!
      try { 
        indexableList0.get((-79));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Integer[] integerArray0 = new Integer[3];
      Integer integer0 = new Integer(1000);
      integerArray0[2] = integer0;
      IndexableList<Integer> indexableList0 = new IndexableList<Integer>(integerArray0, integerArray0);
      // Undeclared exception!
      try { 
        indexableList0.get((int) integerArray0[2]);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      IndexableList<String> indexableList0 = new IndexableList<String>();
      IndexableList<Object> indexableList1 = new IndexableList<Object>();
      indexableList1.aumentarDireitaArray(1000);
      // Undeclared exception!
      try { 
        indexableList1.add(1000, indexableList0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      IndexableList<Object> indexableList0 = new IndexableList<Object>(arrayList0, arrayList0);
      // Undeclared exception!
      try { 
        indexableList0.add(0, arrayList0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("tutorial.IndexableList", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Object[] objectArray0 = new Object[8];
      IndexableList<Object> indexableList0 = new IndexableList<Object>(objectArray0, objectArray0);
      int int0 = indexableList0.size();
      assertEquals(17, int0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      String[] stringArray0 = new String[9];
      stringArray0[0] = "T_SE;gE\"%R$-";
      IndexableList<String> indexableList0 = new IndexableList<String>(stringArray0, stringArray0);
      indexableList0.numElemEsquerda = (-29);
      int int0 = indexableList0.indexOf("T_SE;gE\"%R$-");
      assertEquals((-19), indexableList0.size());
      assertEquals((-29), int0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      String[] stringArray0 = new String[7];
      stringArray0[0] = "X84q7<|A\"k4'9*t";
      stringArray0[1] = "poev1GP,em]";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = "^p";
      stringArray0[5] = "";
      stringArray0[6] = "GA*xnTH{2TO@~G@{<m";
      IndexableList<String> indexableList0 = new IndexableList<String>(stringArray0, stringArray0);
      int int0 = indexableList0.indexOf(indexableList0.MAX_VALOR);
      assertEquals(1, int0);
      assertEquals(15, indexableList0.size());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[0] = "~o Lr\\Bv6v5Lb*BO";
      stringArray0[1] = "t:mv=:692$bFoj:FZ/_";
      stringArray0[2] = "";
      IndexableList<String> indexableList0 = new IndexableList<String>(stringArray0, stringArray0);
      indexableList0.numElemEsquerda = 1;
      indexableList0.contem("t:mv=:692$bFoj:FZ/_");
      assertEquals(5, indexableList0.size());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      IndexableList<Integer> indexableList0 = new IndexableList<Integer>(arrayList0, arrayList0);
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) indexableList0;
      objectArray0[7] = (Object) indexableList0;
      IndexableList<Object> indexableList1 = new IndexableList<Object>(objectArray0, objectArray0);
      boolean boolean0 = indexableList1.contem(objectArray0[0]);
      assertEquals(17, indexableList1.size());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      IndexableList<Object> indexableList0 = new IndexableList<Object>(arrayList0, arrayList0);
      boolean boolean0 = indexableList0.contem((Object) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Object[] objectArray0 = new Object[7];
      IndexableList<Object> indexableList0 = new IndexableList<Object>(objectArray0, objectArray0);
      indexableList0.remover(2);
      indexableList0.aumentarEsquerdaArray(1455);
      indexableList0.remover((-197));
      assertEquals(13, indexableList0.size());
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      String[] stringArray0 = new String[9];
      IndexableList<String> indexableList0 = new IndexableList<String>(stringArray0, stringArray0);
      IndexableList<Object> indexableList1 = new IndexableList<Object>(stringArray0, stringArray0);
      indexableList1.add(16, indexableList0);
      assertEquals(20, indexableList1.size());
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      IndexableList<Object> indexableList0 = new IndexableList<Object>(arrayList0, arrayList0);
      String[] stringArray0 = new String[7];
      indexableList0.arrayDireita = (Object[]) stringArray0;
      IndexableList<String> indexableList1 = new IndexableList<String>(stringArray0, stringArray0);
      // Undeclared exception!
      try { 
        indexableList0.acrescentar(indexableList1.MAX_VALOR);
        fail("Expecting exception: ArrayStoreException");
      
      } catch(ArrayStoreException e) {
         //
         // java.lang.Integer
         //
         verifyException("tutorial.IndexableList", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Object[] objectArray0 = new Object[7];
      IndexableList<Object> indexableList0 = new IndexableList<Object>(objectArray0, objectArray0);
      indexableList0.remover(2);
      assertEquals(14, indexableList0.size());
      
      indexableList0.add(2, (Object) null);
      assertEquals(15, indexableList0.size());
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      Integer integer0 = new Integer(3220);
      IndexableList<Integer> indexableList0 = new IndexableList<Integer>(arrayList0, arrayList0);
      Object[] objectArray0 = new Object[1];
      indexableList0.arrayEsquerda = objectArray0;
      indexableList0.prefixar(integer0);
      assertEquals(2, indexableList0.size());
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      IndexableList<Integer> indexableList0 = new IndexableList<Integer>(arrayList0, arrayList0);
      Object[] objectArray0 = new Object[1];
      indexableList0.arrayEsquerda = objectArray0;
      IndexableList<Object> indexableList1 = new IndexableList<Object>(indexableList0.arrayEsquerda, indexableList0.arrayEsquerda);
      // Undeclared exception!
      try { 
        indexableList1.aumentarDireitaArray((-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("tutorial.IndexableList", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      Integer integer0 = new Integer((-2008));
      arrayList0.add((Object) integer0);
      IndexableList<Object> indexableList0 = new IndexableList<Object>(arrayList0, arrayList0);
      indexableList0.numElemEsquerda = (-2008);
      // Undeclared exception!
      try { 
        indexableList0.remover((-2008));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      ArrayList<String> arrayList0 = new ArrayList<String>();
      IndexableList<String> indexableList0 = new IndexableList<String>(arrayList0, arrayList0);
      indexableList0.acrescentar("");
      assertEquals(2, indexableList0.size());
      
      indexableList0.remover(0);
      assertEquals(1, indexableList0.size());
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      IndexableList<String> indexableList0 = new IndexableList<String>();
      // Undeclared exception!
      try { 
        indexableList0.prefixar("");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("tutorial.IndexableList", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      IndexableList<Object> indexableList0 = new IndexableList<Object>();
      boolean boolean0 = indexableList0.isEmpty();
      assertEquals(1, indexableList0.size());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      IndexableList<Integer> indexableList0 = new IndexableList<Integer>();
      // Undeclared exception!
      try { 
        indexableList0.aumentarEsquerdaArray(999);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("tutorial.IndexableList", e);
      }
  }
}
